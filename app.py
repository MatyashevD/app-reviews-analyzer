import time
import json
import random
import datetime
import streamlit as st
import requests
import pandas as pd
import nltk
from textblob import TextBlob
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.corpus import stopwords
from nltk.tag import pos_tag
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
# Fallback –¥–ª—è App Store - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ iTunes API
from app_store_web_scraper import AppStoreEntry, AppStoreSession
from openai import OpenAI
from google_play_scraper import search, reviews as gp_reviews, Sort
from google_play_scraper import app as gp_app
from collections import Counter
from rapidfuzz import fuzz
from itertools import groupby
from urllib.parse import urlparse

def main():
    st.set_page_config(
        page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
        layout="wide",
        page_icon="üì±",
        menu_items={'About': "### –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ Google Play –∏ App Store"}
    )

    # –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    st.markdown("""
    <style>
    .app-card {
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 8px;
        background: white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        max-width: 320px;
        transition: all 0.2s ease;
        display: block;
    }
    
    .app-card:hover {
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        transform: translateY(-1px);
    }
    
    .app-card img {
        width: 48px;
        height: 48px;
        border-radius: 8px;
        flex-shrink: 0;
    }
    
    /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π */
    .card-container {
        margin-bottom: 20px;
        max-width: 320px;
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        overflow: hidden;
        background: white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    </style>
    """, unsafe_allow_html=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if "openai_api_key" not in st.secrets or not st.secrets["openai_api_key"]:
        st.error("‚ùå API-–∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤.")
        st.stop()

    client = OpenAI(api_key=st.secrets["openai_api_key"])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NLTK –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è NLTK
        nltk.download('punkt', quiet=True)
        nltk.download('averaged_perceptron_tagger', quiet=True)
        nltk.download('stopwords', quiet=True)
        nltk.download('maxent_ne_chunker', quiet=True)
        nltk.download('words', quiet=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
        stop_words = set(stopwords.words('english'))
        nlp_available = True
    except Exception as e:
        st.warning(f"‚ö†Ô∏è NLTK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
        nlp_available = False

    MAX_RESULTS = 5
    DEFAULT_LANG = 'ru'
    DEFAULT_COUNTRY = 'ru'
    GOOGLE_PLAY_MAX_REVIEWS = 10000
    APP_STORE_MAX_REVIEWS = 500

    def extract_app_store_id(url: str) -> str:
        parsed = urlparse(url)
        path = parsed.path.strip('/')
        parts = path.split('/')
        for part in reversed(parts):
            if part.startswith('id') and part[2:].isdigit():
                return part[2:]
            if part.isdigit():
                return part
        return None

    def search_apps(query: str):
        results = {"google_play": [], "app_store": []}
        normalized_query = query.strip().lower()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        special_queries = []
        if 'wb' in normalized_query and 'flot' in normalized_query:
            special_queries.extend(['wb flot', 'wbflot', 'wildberries flot', 'wildberries taxi'])
        elif 'wb' in normalized_query:
            special_queries.extend(['wildberries', 'wb', '–≤–±'])
        elif 'vk' in normalized_query:
            special_queries.extend(['–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ', 'vkontakte', 'vk'])
        elif 'tg' in normalized_query or 'telegram' in normalized_query:
            special_queries.extend(['telegram', 'tg', '—Ç–µ–ª–µ–≥—Ä–∞–º'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É
        all_search_queries = [normalized_query] + special_queries
        
        # –ü–æ–∏—Å–∫ –≤ Google Play
        try:
            all_gp_results = []
            
            # –ò—â–µ–º –ø–æ –≤—Å–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∑–∞–ø—Ä–æ—Å–∞
            for search_query in all_search_queries:
                try:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
                    gp_results = search(search_query, lang="ru", country="ru", n_hits=50)
                    all_gp_results.extend(gp_results)
                    
                    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    if not gp_results:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —è–∑—ã–∫–∞ –∏ —Å—Ç—Ä–∞–Ω—ã
                        gp_results = search(search_query, lang="en", country="us", n_hits=30)
                        if gp_results:
                            all_gp_results.extend(gp_results)
                        
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º
                    if not gp_results and ' ' in search_query:
                        parts = search_query.split()
                        for part in parts:
                            if len(part) >= 2:
                                part_results = search(part, lang="ru", country="ru", n_hits=20)
                                if part_results:
                                    all_gp_results.extend(part_results)
                except Exception as e:
                    continue
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ appId –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
            seen_apps = set()
            unique_gp_results = []
            for r in all_gp_results:
                if r["appId"] not in seen_apps:
                    seen_apps.add(r["appId"])
                    unique_gp_results.append(r)
            
            apps = []
            for r in unique_gp_results:
                try:
                    # 2) –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç 'released'
                    rel_date = None
                    short_rel = r.get("released")
                    if short_rel:
                        try:
                            rel_date = datetime.datetime.strptime(short_rel, "%b %d, %Y").date()
                        except Exception:
                            rel_date = None
        
                    # 3) –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
                    if rel_date is None:
                        try:
                            info = gp_app(r["appId"], lang="ru", country="ru")
                            rel_full = info.get("released")
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
                            if isinstance(rel_full, (int, float)):
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ –¥–∞—Ç—É
                                rel_date = datetime.datetime.fromtimestamp(rel_full/1000).date()
                            elif isinstance(rel_full, datetime.datetime):
                                rel_date = rel_full.date()
                            elif isinstance(rel_full, str):
                                try:
                                    # –§–æ—Ä–º–∞—Ç "15 –∞–ø—Ä–µ–ª—è 2023 –≥."
                                    day_str, month_str, year_str = rel_full.replace(" –≥.", "").split()
                                    months = {
                                        "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
                                        "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
                                        "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
                                    }
                                    rel_date = datetime.date(
                                        year=int(year_str),
                                        month=months[month_str.lower()],
                                        day=int(day_str)
                                    )
                                except:
                                    # –§–æ—Ä–º–∞—Ç ISO –¥–ª—è –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                                    updated = info.get("updated")
                                    if isinstance(updated, (int, float)):
                                        rel_date = datetime.datetime.fromtimestamp(updated/1000).date()
                                    elif isinstance(updated, str):
                                        rel_date = datetime.datetime.fromisoformat(
                                            updated.replace("Z", "+00:00")
                                        ).date()
                        except Exception as e:
                            # –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É –≤ UI, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
                            continue
        
                    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥—Å—á–µ—Ç–∞ match_score
                    title_lower = r["title"].lower()
                    developer_lower = r.get("developer", "").lower()
                    
                    # –°—á–∏—Ç–∞–µ–º score –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
                    title_score = max(
                        fuzz.token_set_ratio(normalized_query, title_lower),
                        fuzz.partial_ratio(normalized_query, title_lower),
                        fuzz.ratio(normalized_query, title_lower)
                    )
                    
                    developer_score = 0
                    if developer_lower:
                        developer_score = max(
                            fuzz.token_set_ratio(normalized_query, developer_lower),
                            fuzz.partial_ratio(normalized_query, developer_lower)
                        )
                    
                    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π score
                    combined_score = max(title_score, developer_score)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å - —É–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ score > 0
                    score = r.get("score", 0) or 0
                    apps.append({
                        "id": r["appId"],
                        "title": r["title"],
                        "developer": r.get("developer"),
                        "score": score,
                        "release_date": rel_date,
                        "platform": "Google Play",
                        "match_score": combined_score,
                        "icon": r.get("icon")
                    })
                except Exception as e:
                    continue
        
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            high_quality = [app for app in apps if app['match_score'] >= 80]  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            medium_quality = [app for app in apps if 50 <= app['match_score'] < 80]  # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            low_quality = [app for app in apps if 30 <= app['match_score'] < 50]  # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, 2 –Ω–∏–∑–∫–æ–≥–æ (–µ—Å–ª–∏ –Ω–µ—Ç –≤—ã—Å–æ–∫–æ–≥–æ)
            filtered_apps = []
            filtered_apps.extend(high_quality[:5])  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 3 –¥–æ 5
            if not high_quality:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                filtered_apps.extend(low_quality[:2])  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 1 –¥–æ 2
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥—É
            results["google_play"] = sorted(
                filtered_apps,
                key=lambda x: (-x['match_score'], -x['score']),
            )
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Google Play: {str(e)}")
            st.exception(e)
        
        # –ü–æ–∏—Å–∫ –≤ App Store
        try:
            itunes_response = requests.get(
                "https://itunes.apple.com/search",
                params={
                    "term": normalized_query,
                    "country": DEFAULT_COUNTRY,
                    "media": "software",
                    "limit": 100,  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 50 –¥–æ 100 –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
                    "entity": "software,iPadSoftware",
                    "lang": "ru_ru"
                },
                headers={"User-Agent": "Mozilla/5.0"}
            )
            ios_data = itunes_response.json()
            
            processed = []
            for r in ios_data.get("results", []):
                try:
                    release_date = (
                        datetime.datetime.strptime(
                            r['currentVersionReleaseDate'].replace('Z', '+00:00'), 
                            '%Y-%m-%dT%H:%M:%S%z'
                        ).date()
                    ) if r.get('currentVersionReleaseDate') else None
                    
                    processed.append({
                        "id": str(r["trackId"]),
                        "app_store_id": extract_app_store_id(r["trackViewUrl"]),
                        "title": r["trackName"],
                        "developer": r["artistName"],
                        "score": r.get("averageUserRating", 0),
                        "release_date": release_date,
                        "url": r["trackViewUrl"],
                        "platform": 'App Store',
                        "match_score": fuzz.token_set_ratio(
                            normalized_query,
                            r['trackName'].strip().lower()
                        ),
                        "icon": r["artworkUrl512"].replace("512x512bb", "256x256bb")
                    })
                except Exception as e:
                    continue

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è App Store
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            ios_high_quality = [r for r in processed if r['match_score'] >= 80]
            ios_medium_quality = [r for r in processed if 50 <= r['match_score'] < 80]
            ios_low_quality = [r for r in processed if 30 <= r['match_score'] < 50]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, 2 –Ω–∏–∑–∫–æ–≥–æ (–µ—Å–ª–∏ –Ω–µ—Ç –≤—ã—Å–æ–∫–æ–≥–æ)
            ios_filtered = []
            ios_filtered.extend(ios_high_quality[:5])  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 3 –¥–æ 5
            if not ios_high_quality:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                ios_filtered.extend(ios_low_quality[:2])  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 1 –¥–æ 2

            results["app_store"] = sorted(
                ios_filtered,
                key=lambda x: (-x['match_score'], -x['score']),
            )
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ App Store: {str(e)}")
        
        return results

    def display_selected_apps():
        st.subheader("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", divider="green")
        cols = st.columns(2)
        selected_apps = [
            st.session_state.get('selected_gp_app'),
            st.session_state.get('selected_ios_app')
        ]
        
        for idx, app in enumerate(selected_apps):
            if app:
                platform_style = {
                    'Google Play': {'bg': '#e8f0fe', 'color': '#1967d2'},
                    'App Store': {'bg': '#fde8ef', 'color': '#ff2d55'}
                }[app['platform']]
                
                with cols[idx]:
                    st.markdown(f"""
                    <div style="
                        border: 2px solid {platform_style['color']};
                        border-radius: 12px;
                        padding: 16px;
                        margin: 8px 0;
                        background: {platform_style['bg']};
                        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                    ">
                        <div style="font-size: 17px; font-weight: 600; color: #1a1a1a;">
                            {app['title']}
                        </div>
                        <div style="font-size: 13px; color: #666; margin: 6px 0;">
                            {app['developer']}
                        </div>
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div style="color: {platform_style['color']}; font-weight: 500;">
                                ‚òÖ {app['score']:.1f}
                            </div>
                            <div style="
                                background: {platform_style['bg']};
                                color: {platform_style['color']};
                                padding: 4px 12px;
                                border-radius: 20px;
                                font-size: 12px;
                                font-weight: 500;
                            ">
                                {app['platform']}
                            </div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)

    def display_search_results(results: dict):
        st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", divider="rainbow")

        custom_css = """
            <style>
                .horizontal-scroll {
                    display: flex;
                    overflow-x: auto;
                    padding: 10px 0;
                    gap: 20px;
                }
                .app-card {
                    width: 400px;
                    border: 1px solid #e0e0e0;
                    border-radius: 12px;
                    padding: 12px;
                    background: white;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
                }
                .app-card img {
                    width: 50px; 
                    height: 50px;
                    border-radius: 12px;
                }
            </style>
        """
        st.markdown(custom_css, unsafe_allow_html=True)

        def render_platform(platform_name, platform_data, platform_key, color, bg_color):
            if platform_data:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                high_quality = [app for app in platform_data if app['match_score'] >= 80]
                medium_quality = [app for app in platform_data if 50 <= app['match_score'] < 80]
                low_quality = [app for app in platform_data if 30 <= app['match_score'] < 50]
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã–º
                if high_quality:
                    st.markdown(f"### üéØ {platform_name} - –õ—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ({len(high_quality)})")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 –ª—É—á—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    max_cards = min(len(high_quality), 5)
                    cols = st.columns(max_cards)
                    for idx, app in enumerate(high_quality[:max_cards]):
                        with cols[idx]:
                            render_app_card(app, platform_key, color, bg_color, is_high_quality=True)
                
                # –£–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if low_quality and not high_quality and not medium_quality:
                    st.markdown(f"### üí° {platform_name} - –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ({len(low_quality)})")
                    cols = st.columns(min(len(low_quality), 2))
                    for idx, app in enumerate(low_quality):
                        with cols[idx]:
                            render_app_card(app, platform_key, color, bg_color, is_high_quality=False)

        def render_app_card(app, platform_key, color, bg_color, is_high_quality=False):
            """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
            selected_app = st.session_state.get(f"selected_{platform_key}_app") or {}
            is_selected = selected_app.get('id') == app['id']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            if is_high_quality:
                relevance_color = "#4CAF50"  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                border_style = f"3px solid {relevance_color}"
            else:
                relevance_color = "#FF9800"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ/–Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                border_style = f"2px solid {color}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            rating_display = f"‚òÖ {app['score']:.1f}" if app['score'] > 0 else "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
            
            st.markdown(f"""
            <div class="card-container">
                <div class="app-card" style="border: {border_style}; margin-bottom: 0;">
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <img src="{app.get('icon', 'https://via.placeholder.com/50')}">
                        <div style="flex: 1;">
                            <div style="font-weight: 600; font-size: 14px; color: #2e2e2e; margin-bottom: 4px;">
                                {app['title']}
                                </div>
                            <div style="font-size: 12px; color: #a8a8a8; margin-bottom: 6px;">
                                {app['developer']}
                            </div>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div style="color: {color}; font-weight: 500;">
                                    {rating_display}
                                </div>
                                <div style="
                                    background: {relevance_color}; 
                                    color: white; 
                                    padding: 2px 8px; 
                                    border-radius: 10px; 
                                    font-size: 10px; 
                                    font-weight: 600;
                                ">
                                    {app['match_score']:.0f}%
                                </div>
                            </div>
                        </div>
                    </div>
                    <div style="
                        background: {bg_color}; 
                        color: {color}; 
                        padding: 4px 12px; 
                        border-radius: 20px; 
                        font-size: 12px;
                        text-align: center;
                        font-weight: 500;
                    ">
                        {platform_key.upper()}
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
                        
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –∫–∞—Ä—Ç–æ—á–∫–∏
            if st.button(
                "‚úì –í—ã–±—Ä–∞–Ω–æ" if is_selected else "–í—ã–±—Ä–∞—Ç—å",
                key=f"{platform_key}_{app['id']}",
                use_container_width=True,  # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
                type="primary" if is_selected else "secondary"
            ):
                if platform_key == "gp":
                    new_selection = app if not is_selected else None
                    st.session_state.selected_gp_app = new_selection
                    if new_selection and new_selection.get('release_date'):
                        st.session_state.gp_release_dates = [{
                            'date': new_selection['release_date'],
                            'platform': 'Google Play'
                        }]
                    else:
                        st.session_state.gp_release_dates = []
                        
                elif platform_key == "ios":
                    new_selection = app if not is_selected else None
                    st.session_state.selected_ios_app = new_selection
                    if new_selection and new_selection.get('release_date'):
                        st.session_state.ios_release_dates = [{
                            'date': new_selection['release_date'],
                            'platform': 'App Store'
                        }]
                st.rerun()

        render_platform("Ô£ø App Store", results["app_store"], "ios", "#399eff", "#cce2ff")
        render_platform("üì≤ Google Play", results["google_play"], "gp", "#36c55f", "#e3ffeb")

        if not results["app_store"] and not results["google_play"]:
            st.warning("üòû –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    def get_reviews(app_id: str, platform: str, start_date: datetime.date, end_date: datetime.date, debug_mode: bool = False):
        try:
            if platform == 'google_play':
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 100 —à—Ç—É–∫
                batch_size = 100
                all_reviews = []
                continuation_token = None
                date_filter_enabled = False
    
                while True:
                    result, continuation_token = gp_reviews(
                        app_id,
                        lang=DEFAULT_LANG,
                        country=DEFAULT_COUNTRY,
                        count=batch_size,
                        sort=Sort.NEWEST,
                        continuation_token=continuation_token
                    )
    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ª–µ—Ç—É —Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ–º –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω
                    for r in result:
                        review_date = r['at'].date()
                        if review_date < start_date:
                            date_filter_enabled = True
                            break
                        if start_date <= review_date <= end_date:
                            all_reviews.append((
                                r['at'].replace(tzinfo=None),
                                r['content'],
                                'Google Play',
                                r['score']
                            ))
    
                    if date_filter_enabled or not continuation_token or len(all_reviews) >= 1000:
                        break
    
                    time.sleep(1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    
                return all_reviews
    
            elif platform == 'app_store':
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ App Store
                selected_app = st.session_state.get('selected_ios_app')
                if not selected_app or not selected_app.get('app_store_id'):
                    st.error("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ App Store")
                    return []                

                app_store_id = selected_app['app_store_id']
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –∏–∑ App Store —á–µ—Ä–µ–∑ iTunes API
                    itunes_url = f"https://itunes.apple.com/lookup?id={app_store_id}&country=ru"
                    response = requests.get(itunes_url, headers={"User-Agent": "Mozilla/5.0"})
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get('results'):
                            app_info = data['results'][0]
                            
                            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ RSS feed
                            if debug_mode:
                                st.info(f"üîç –ò—â–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è App Store ID: {app_store_id}")
                                st.info(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {start_date} - {end_date}")
                            
                            reviews_url = f"https://itunes.apple.com/ru/rss/customerreviews/id={app_store_id}/sortBy=mostRecent/json"
                            if debug_mode:
                                st.info(f"üîó URL: {reviews_url}")
                            
                            reviews_response = requests.get(reviews_url, headers={"User-Agent": "Mozilla/5.0"})
                            
                            if reviews_response.status_code == 200:
                                reviews_data = reviews_response.json()
                                if debug_mode:
                                    st.info(f"‚úÖ RSS –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å: {reviews_response.status_code}")
                                
                                all_reviews = []
                                
                                if 'feed' in reviews_data and 'entry' in reviews_data['feed']:
                                    entries = reviews_data['feed']['entry']
                                    if debug_mode:
                                        st.info(f"üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(entries)}")
                                    
                                    # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                                    for i, entry in enumerate(entries[1:], 1):
                                        try:
                                            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ—Ç–∑—ã–≤–∞
                                            date_str = entry.get('updated', {}).get('label', '')
                                            if debug_mode:
                                                st.info(f"üìÖ –ó–∞–ø–∏—Å—å {i}: {date_str}")
                                            
                                            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                                            try:
                                                # –§–æ—Ä–º–∞—Ç 1: UTC (Z)
                                                review_date = datetime.datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%SZ').date()
                                            except ValueError:
                                                try:
                                                    # –§–æ—Ä–º–∞—Ç 2: –° —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º (-07:00)
                                                    review_date = datetime.datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%S%z').date()
                                                except ValueError:
                                                    try:
                                                        # –§–æ—Ä–º–∞—Ç 3: –ë–µ–∑ —Å–µ–∫—É–Ω–¥
                                                        review_date = datetime.datetime.strptime(date_str, '%Y-%m-%dT%H:%M%z').date()
                                                    except ValueError:
                                                        # –§–æ—Ä–º–∞—Ç 4: –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                                                        review_date = datetime.datetime.strptime(date_str, '%Y-%m-%d').date()
                                            
                                            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                                            if start_date <= review_date <= end_date:
                                                all_reviews.append((
                                                    datetime.datetime.combine(review_date, datetime.time.min),
                                                    entry.get('content', {}).get('label', ''),
                                                    'App Store',
                                                    int(entry.get('im:rating', {}).get('label', 0))
                                                ))
                                                if debug_mode:
                                                    st.info(f"‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω: {review_date}")
                                            else:
                                                if debug_mode:
                                                    st.info(f"‚ùå –û—Ç–∑—ã–≤ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {review_date}")
                                        except Exception as e:
                                            if debug_mode:
                                                st.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø–∏—Å–∏ {i}: {str(e)}")
                                            continue
                            
                            if debug_mode:
                                st.info(f"üéØ –ò—Ç–æ–≥–æ –æ—Ç–∑—ã–≤–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {len(all_reviews)}")
                            
                            # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                            if not all_reviews:
                                if debug_mode:
                                    st.info("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
                                try:
                                    alt_url = f"https://itunes.apple.com/ru/rss/customerreviews/id={app_store_id}/json"
                                    alt_response = requests.get(alt_url, headers={"User-Agent": "Mozilla/5.0"})
                                    
                                    if alt_response.status_code == 200:
                                        alt_data = alt_response.json()
                                        if 'feed' in alt_data and 'entry' in alt_data['feed']:
                                            alt_entries = alt_data['feed']['entry']
                                            if debug_mode:
                                                st.info(f"üìù –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: {len(alt_entries)} –∑–∞–ø–∏—Å–µ–π")
                                            
                                            for entry in alt_entries[1:]:
                                                try:
                                                    date_str = entry.get('updated', {}).get('label', '')
                                                    
                                                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                                                    try:
                                                        # –§–æ—Ä–º–∞—Ç 1: UTC (Z)
                                                        review_date = datetime.datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%SZ').date()
                                                    except ValueError:
                                                        try:
                                                            # –§–æ—Ä–º–∞—Ç 2: –° —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º (-07:00)
                                                            review_date = datetime.datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%S%z').date()
                                                        except ValueError:
                                                            try:
                                                                # –§–æ—Ä–º–∞—Ç 3: –ë–µ–∑ —Å–µ–∫—É–Ω–¥
                                                                review_date = datetime.datetime.strptime(date_str, '%Y-%m-%dT%H:%M%z').date()
                                                            except ValueError:
                                                                # –§–æ—Ä–º–∞—Ç 4: –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                                                                review_date = datetime.datetime.strptime(date_str, '%Y-%m-%d').date()
                                                        
                                                        if start_date <= review_date <= end_date:
                                                            all_reviews.append((
                                                                datetime.datetime.combine(review_date, datetime.time.min),
                                                                entry.get('content', {}).get('label', ''),
                                                                'App Store',
                                                                int(entry.get('im:rating', {}).get('label', 0))
                                                            ))
                                                except Exception:
                                                    continue
                                except Exception as e:
                                    if debug_mode:
                                        st.info(f"‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
                            
                            return all_reviews
                        else:
                            if debug_mode:
                                st.warning(f"‚ùå RSS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: {reviews_response.status_code}")
                            return []
                    else:
                        st.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ App Store")
                        return []
    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")
            return []

    def analyze_with_ai_contextual(reviews_texts: list):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º
            grouped_reviews = group_reviews_by_context(reviews_texts)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –æ—Ç–¥–µ–ª—å–Ω–æ
            category_analyses = {}
            total_categories = len([cat for cat, reviews in grouped_reviews.items() if len(reviews) >= 3])
            current_category = 0
            
            for category, category_reviews in grouped_reviews.items():
                if len(category_reviews) >= 3:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–∑—ã–≤–æ–≤
                    current_category += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã)
                    try:
                        progress = int((current_category / total_categories) * 100)
                        # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã
                        pass  # –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                    except:
                        pass
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                    max_reviews_per_group = min(100, len(category_reviews))
                    sample_reviews = category_reviews[:max_reviews_per_group]
                    
                    category_text = "\n".join(sample_reviews)
                    
                    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    category_prompts = {
                        "üí≥ –ü–ª–∞—Ç–µ–∂–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã": {
                            "focus": "–ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø—Ä–∏–≤—è–∑–∫–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç, —Ç–∞—Ä–∏—Ñ–∞–º–∏, —Å–ø–∏—Å–∞–Ω–∏—è–º–∏",
                            "context": "—Ä–∞–∑–ª–∏—á–∞–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –æ—Ç –∫–∞—Ä—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
                        },
                        "üó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è": {
                            "focus": "–ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∞–¥—Ä–µ—Å–∞–º–∏, –º–∞—Ä—à—Ä—É—Ç–∞–º–∏, –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π",
                            "context": "—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö, –Ω–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö"
                        },
                        "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å": {
                            "focus": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –±–∞–≥–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                            "context": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è"
                        },
                        "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞": {
                            "focus": "–ø—Ä–æ–±–ª–µ–º—ã —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏, –ø–æ–µ–∑–¥–∫–∞–º–∏, –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π, –∑–∞–∫–∞–∑–∞–º–∏",
                            "context": "–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ä–≤–∏—Å–∞"
                        },
                        "üë• –°–µ—Ä–≤–∏—Å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞": {
                            "focus": "–∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
                            "context": "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏"
                        },
                        "‚è∞ –í—Ä–µ–º—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å": {
                            "focus": "–ø—Ä–æ–±–ª–µ–º—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º, —Å–∫–æ—Ä–æ—Å—Ç—å—é, –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏, –æ–∂–∏–¥–∞–Ω–∏–µ–º",
                            "context": "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"
                        }
                    }
                    
                    prompt_data = category_prompts.get(category, {"focus": "–æ–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "context": ""})
                    
                    response = client.chat.completions.create(
                        model="gpt-4-1106-preview",
                        messages=[{
                            "role": "system",
                            "content": f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}".

–§–û–ö–£–°: {prompt_data['focus']}
–ö–û–ù–¢–ï–ö–°–¢: {prompt_data['context']}

–§–æ—Ä–º–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è):

## üîç –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
- **–ü—Ä–æ–±–ª–µ–º–∞ 1**: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤
- **–ü—Ä–æ–±–ª–µ–º–∞ 2**: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤  
- **–ü—Ä–æ–±–ª–µ–º–∞ 3**: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤**: {len(sample_reviews)}
- **–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å**: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö
- **–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å**: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä—å–µ–∑–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã (–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è)

## üí° –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- **–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å** (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)
- **–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å** (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏)

–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–¥–∞—É–Ω."""
                        }, {
                            "role": "user",
                            "content": f"–û—Ç–∑—ã–≤—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n\n{category_text[:4000]}"
                        }],
                        temperature=0.1,
                        max_tokens=1000
                    )
                    
                    if response.choices:
                        category_analyses[category] = response.choices[0].message.content
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
            if category_analyses:
                combined_analysis = ""
                
                for category, analysis in category_analyses.items():
                    combined_analysis += f"### {category}\n{analysis}\n\n"
                
                return combined_analysis
            else:
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
                
        except Exception as e:
            st.error(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
            return None

    def analyze_with_ai(reviews_text: str):
        """–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ (fallback)"""
        try:
            response = client.chat.completions.create(
                model="gpt-4-1106-preview",
                messages=[{
                    "role": "system",
                    "content": """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

## üîç –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
–î–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
- **–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã** (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)
- **–ß–∞—Å—Ç–æ—Ç–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è** (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤)
- **–í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** (–∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–ø—ã—Ç)
- **–ü—Ä–∏–º–µ—Ä—ã –∏–∑ –æ—Ç–∑—ã–≤–æ–≤** (—Ü–∏—Ç–∞—Ç—ã –∏–ª–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã)

## üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- **–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã** (–ø—Ä–æ—Ü–µ–Ω—Ç –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã)
- **–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã** (–ø—Ä–æ—Ü–µ–Ω—Ç –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä)
- **–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã** (–ø—Ä–æ—Ü–µ–Ω—Ç –∏ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã)

## üí° –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
- **–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è** (—á—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä–æ)
- **–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è** (—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã** (—á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å)

## üìà –¢—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
- **–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏** (—É–ª—É—á—à–∞–µ—Ç—Å—è/—É—Ö—É–¥—à–∞–µ—Ç—Å—è)
- **–°–µ–∑–æ–Ω–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏** (–µ—Å–ª–∏ –µ—Å—Ç—å)
- **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º** (Google Play vs App Store)

–ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–¥–∞—É–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π."""
                }, {
                    "role": "user",
                    "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{reviews_text[:8000]}"
                }],
                temperature=0.2,
                max_tokens=2500
            )
            return response.choices[0].message.content if response.choices else "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è"
        except Exception as e:
            st.error(f"AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
            return None

    def analyze_reviews(filtered_reviews: list):
        analysis = {
            'key_phrases': Counter(),
            'platform_counts': Counter(),
            'total_reviews': len(filtered_reviews),
            'gp_rating': 0.0,
            'ios_rating': 0.0,
            'ai_analysis': None
        }
        
        gp_ratings, ios_ratings = [], []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        all_texts = []
        
        for _, text, platform, rating in filtered_reviews:
            analysis['platform_counts'][platform] += 1
            if platform == 'Google Play': 
                gp_ratings.append(rating)
            else: 
                ios_ratings.append(rating)
            
            all_texts.append(text)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 100 –æ—Ç–∑—ã–≤–æ–≤)
        sample_size = min(100, len(all_texts))
        sample_texts = all_texts[:sample_size]
        
        if nlp_available and sample_size > 0:
            try:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                combined_text = " ".join(sample_texts).lower()
                tokens = word_tokenize(combined_text)
                pos_tags = pos_tag(tokens)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
                phrases = []
                current_phrase = []
                
                for token, tag in pos_tags:
                    if tag.startswith(('NN', 'JJ', 'NNP')) and token not in stop_words and len(token) > 2:
                        current_phrase.append(token)
                    else:
                        if current_phrase:
                            phrase = ' '.join(current_phrase)
                            if 2 <= len(current_phrase) <= 3:
                                phrases.append(phrase)
                        current_phrase = []
            
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ—Ä–∞–∑—É
                if current_phrase:
                    phrase = ' '.join(current_phrase)
                    if 2 <= len(current_phrase) <= 3:
                        phrases.append(phrase)
                
                # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Ñ—Ä–∞–∑
                for phrase in phrases:
                    analysis['key_phrases'][phrase] += 1
                    
            except Exception:
                # Fallback: –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
                for text in sample_texts:
                    words = text.lower().split()
                    for i in range(len(words) - 1):
                        if len(words[i]) > 3 and len(words[i+1]) > 3:
                            phrase = f"{words[i]} {words[i+1]}"
                            analysis['key_phrases'][phrase] += 1
        else:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ NLTK
            for text in sample_texts:
                words = text.lower().split()
                for i in range(len(words) - 1):
                    if len(words[i]) > 3 and len(words[i+1]) > 3:
                        phrase = f"{words[i]} {words[i+1]}"
                        analysis['key_phrases'][phrase] += 1

        analysis['gp_rating'] = sum(gp_ratings)/len(gp_ratings) if gp_ratings else 0
        analysis['ios_rating'] = sum(ios_ratings)/len(ios_ratings) if ios_ratings else 0
        
        if client.api_key:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
            max_reviews_for_ai = min(500, len(filtered_reviews))
            reviews_texts = [r[1] for r in filtered_reviews[:max_reviews_for_ai]]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å AI –∞–Ω–∞–ª–∏–∑–∞
                progress_container = st.empty()
                status_container = st.empty()
                
                progress_container.progress(0)
                status_container.text("ü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞...")
                
                analysis['ai_analysis'] = analyze_with_ai_contextual(reviews_texts)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress_container.progress(100)
                status_container.text("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                
                # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                import time
                time.sleep(2)
                progress_container.empty()
                status_container.empty()
                
            except Exception as e:
                # Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É
                reviews_text = "\n".join(reviews_texts)
            analysis['ai_analysis'] = analyze_with_ai(reviews_text)
        
        return analysis



    def group_reviews_by_context(reviews_texts: list) -> dict:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            context_categories = {
                "üí≥ –ü–ª–∞—Ç–µ–∂–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã": [
                    "–∫–∞—Ä—Ç–∞", "–æ–ø–ª–∞—Ç–∞", "–ø–ª–∞—Ç–µ–∂", "–¥–µ–Ω—å–≥–∏", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞", "—Ç–∞—Ä–∏—Ñ",
                    "–ø—Ä–∏–≤—è–∑–∞—Ç—å", "–±–∞–Ω–∫", "—Å—á–µ—Ç", "—Å–ø–∏—Å–∞–Ω–∏–µ", "–≤–æ–∑–≤—Ä–∞—Ç", "—á–µ–∫", "–∫–≤–∏—Ç–∞–Ω—Ü–∏—è"
                ],
                "üó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è": [
                    "–∞–¥—Ä–µ—Å", "–º–∞—Ä—à—Ä—É—Ç", "–Ω–∞–≤–∏–≥–∞—Ü–∏—è", "–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è", "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                    "–ø–æ—Å—Ç—Ä–æ–∏—Ç—å", "–¥–æ—Ä–æ–≥–∞", "–ø—É—Ç—å", "–Ω–∞–π—Ç–∏", "–ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞", "–∫–∞—Ä—Ç–∞ –≥–æ—Ä–æ–¥–∞"
                ],
                "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å": [
                    "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "—Ñ—É–Ω–∫—Ü–∏—è", "–∫–Ω–æ–ø–∫–∞", "–º–µ–Ω—é", "—ç–∫—Ä–∞–Ω", "–∑–∞–≥—Ä—É–∑–∫–∞",
                    "–±–∞–≥", "–æ—à–∏–±–∫–∞", "–≥–ª—é–∫", "–∑–∞–≤–∏—Å–∞–µ—Ç", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
                ],
                "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞": [
                    "–≤–æ–¥–∏—Ç–µ–ª—å", "—Ç–∞–∫—Å–∏", "–º–∞—à–∏–Ω–∞", "–ø–æ–µ–∑–¥–∫–∞", "–∑–∞–∫–∞–∑", "–≤—ã–∑–æ–≤", "–ø—Ä–∏–µ—Ö–∞—Ç—å",
                    "–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è", "–æ—Ç–º–µ–Ω–∞", "–æ—Ç–∫–∞–∑", "–ø—Ä–æ–±–∫–∏", "–¥–æ—Ä–æ–≥–∞"
                ],
                "üë• –°–µ—Ä–≤–∏—Å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞": [
                    "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "—Å–µ—Ä–≤–∏—Å", "–ø–æ–º–æ—â—å", "–æ–ø–µ—Ä–∞—Ç–æ—Ä", "–∑–≤–æ–Ω–æ–∫", "—á–∞—Ç", "–æ–±—Ä–∞—â–µ–Ω–∏–µ",
                    "–∂–∞–ª–æ–±–∞", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "–æ—Ç–Ω–æ—à–µ–Ω–∏–µ", "–∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
                ],
                "‚è∞ –í—Ä–µ–º—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å": [
                    "–±—ã—Å—Ç—Ä–æ", "–º–µ–¥–ª–µ–Ω–Ω–æ", "–¥–æ–ª–≥–æ", "–≤—Ä–µ–º—è", "—Å–∫–æ—Ä–æ—Å—Ç—å", "–æ–∂–∏–¥–∞–Ω–∏–µ", "–∑–∞–¥–µ—Ä–∂–∫–∞",
                    "–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ", "–ø—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å"
                ]
            }
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º
            grouped_reviews = {category: [] for category in context_categories.keys()}
            ungrouped_reviews = []
            
            for review_text in reviews_texts:
                review_lower = review_text.lower()
                matched_categories = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫ –∫–∞–∫–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—Ç–∑—ã–≤
                for category, keywords in context_categories.items():
                    if any(keyword in review_lower for keyword in keywords):
                        matched_categories.append(category)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if matched_categories:
                    for category in matched_categories:
                        grouped_reviews[category].append(review_text)
                else:
                    ungrouped_reviews.append(review_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –≤ –æ–±—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if ungrouped_reviews:
                grouped_reviews["üìù –û–±—â–∏–µ –æ—Ç–∑—ã–≤—ã"] = ungrouped_reviews
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            filtered_groups = {k: v for k, v in grouped_reviews.items() if v}
            
            return filtered_groups
            
        except Exception as e:
            # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
            return {"üìù –í—Å–µ –æ—Ç–∑—ã–≤—ã": reviews_texts}

    def analyze_key_themes(texts: list) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
            max_texts = min(200, len(texts))
            sample_texts = texts[:max_texts]
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã
            all_text = " ".join(sample_texts).lower()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            theme_categories = {
                "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞": [
                    "–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏", "–≤—Ä–µ–º—è –≤ –ø—É—Ç–∏", "–ø—Ä–æ–±–∫–∏", "–º–∞—Ä—à—Ä—É—Ç", "–Ω–∞–≤–∏–≥–∞—Ü–∏—è",
                    "–≤–æ–¥–∏—Ç–µ–ª—å", "—Ç–∞–∫—Å–∏", "–∑–∞–∫–∞–∑", "–ø–æ–µ–∑–¥–∫–∞", "–¥–æ—Ä–æ–≥–∞", "–ø–µ—Ä–µ–≤–æ–∑–∫–∞"
                ],
                "‚è∞ –í—Ä–µ–º—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å": [
                    "–±—ã—Å—Ç—Ä–æ", "–º–µ–¥–ª–µ–Ω–Ω–æ", "–¥–æ–ª–≥–æ", "–≤—Ä–µ–º—è", "—Å–∫–æ—Ä–æ—Å—Ç—å", "–æ–∂–∏–¥–∞–Ω–∏–µ",
                    "–∑–∞–¥–µ—Ä–∂–∫–∞", "–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ"
                ],
                "üí∞ –¶–µ–Ω—ã –∏ –æ–ø–ª–∞—Ç–∞": [
                    "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–¥–æ—Ä–æ–≥–æ", "–¥–µ—à–µ–≤–æ", "–æ–ø–ª–∞—Ç–∞", "—Ç–∞—Ä–∏—Ñ",
                    "—Ä–∞—Å—Ö–æ–¥—ã", "—ç–∫–æ–Ω–æ–º–∏—è", "–≤—ã–≥–æ–¥–Ω–æ"
                ],
                "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å": [
                    "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "—É–¥–æ–±–Ω–æ", "–ø—Ä–æ—Å—Ç–æ", "–ø–æ–Ω—è—Ç–Ω–æ",
                    "—Ñ—É–Ω–∫—Ü–∏–∏", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–¥–∏–∑–∞–π–Ω", "—Ä–∞–±–æ—Ç–∞–µ—Ç", "–±–∞–≥–∏"
                ],
                "üë• –°–µ—Ä–≤–∏—Å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞": [
                    "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "—Å–µ—Ä–≤–∏—Å", "–ø–æ–º–æ—â—å", "–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "–∫–ª–∏–µ–Ω—Ç",
                    "–∫–∞—á–µ—Å—Ç–≤–æ", "–æ—Ç–Ω–æ—à–µ–Ω–∏–µ", "–≤–Ω–∏–º–∞–Ω–∏–µ"
                ],
                "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": [
                    "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∑–∞—â–∏—Ç–∞", "–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "–¥–∞–Ω–Ω—ã–µ",
                    "–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å"
                ]
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            theme_scores = {}
            for theme_name, keywords in theme_categories.items():
                score = 0
                examples = []
                
                for keyword in keywords:
                    if keyword in all_text:
                        # –°—á–∏—Ç–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        count = all_text.count(keyword)
                        score += count
                        
                        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
                        if len(examples) < 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
                            for text in sample_texts:
                                if keyword in text.lower():
                                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∏—â–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ
                                    sentences = text.split('.')
                                    for sentence in sentences:
                                        if keyword in sentence.lower():
                                            clean_sentence = sentence.strip()
                                            if 10 < len(clean_sentence) < 200:
                                                examples.append(clean_sentence)
                                                break
                                    if len(examples) >= 3:  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
                                        break
                
                if score > 0:
                    theme_scores[theme_name] = {
                        'score': score,
                        'examples': examples[:3]
                    }
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é score
            sorted_themes = dict(sorted(theme_scores.items(), key=lambda x: x[1]['score'], reverse=True))
            
            return sorted_themes
            
        except Exception as e:
            # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
            return {}

    def display_analysis(analysis: dict, filtered_reviews: list, start_date: datetime.date, end_date: datetime.date):
        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", divider="rainbow")
        
        tab1, tab2, tab3 = st.tabs(["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–í—Å–µ –æ—Ç–∑—ã–≤—ã", "–ì—Ä–∞—Ñ–∏–∫–∏"])
        
        with tab1:
            cols = st.columns(3)
            cols[0].metric("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", analysis['total_reviews'])
            cols[1].metric("Google Play", analysis['platform_counts'].get('Google Play', 0), f"‚òÖ {analysis['gp_rating']:.1f}")
            cols[2].metric("App Store", analysis['platform_counts'].get('App Store', 0), f"‚òÖ {analysis['ios_rating']:.1f}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            st.subheader("üéØ –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞
            with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã..."):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º
                review_texts = [r[1] for r in filtered_reviews]
                key_themes = analyze_key_themes(review_texts)
            
            if key_themes:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–≤–µ—Ä–Ω—É—Ç—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                for theme_name, theme_data in key_themes.items():
                    with st.expander(f"{theme_name} ({theme_data['score']} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π)", expanded=False):
                        st.markdown(f"**üìä –û–±—â–∏–π —Å—á–µ—Ç:** {theme_data['score']}")
                        
                        if theme_data['examples']:
                            st.markdown("**üí¨ –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –æ—Ç–∑—ã–≤–æ–≤:**")
                            for i, example in enumerate(theme_data['examples'], 1):
                                st.markdown(f"{i}. *\"{example}...\"*")
                        else:
                            st.info("–ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                st.info("–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã (–≤ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–æ–º –±–ª–æ–∫–µ)
            if analysis['key_phrases']:
                st.markdown("---")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—Ä–∞–∑—ã
                useful_phrases = []
                for phrase, count in analysis['key_phrases'].most_common(30):
                    # –£–±–∏—Ä–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
                    if (len(phrase.split()) >= 2 and 
                        count >= 2 and 
                        len(phrase) > 5 and
                        not any(word in phrase.lower() for word in ['–µ—Å—Ç—å', '–±—ã—Ç—å', '—Å—Ç–∞—Ç—å', '–º–æ—á—å'])):
                        useful_phrases.append((phrase, count))
                
                if useful_phrases:
                    with st.expander("üî§ –ß–∞—Å—Ç—ã–µ —Ñ—Ä–∞–∑—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è", expanded=False):
                        st.markdown("**üìä –ù–∞–∏–±–æ–ª–µ–µ —É–ø–æ–º–∏–Ω–∞–µ–º—ã–µ —Ñ—Ä–∞–∑—ã –≤ –æ—Ç–∑—ã–≤–∞—Ö:**")
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                        categories = {
                            "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": [],
                            "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": [],
                            "‚è∞ –í—Ä–µ–º—è": [],
                            "üí∞ –¶–µ–Ω—ã": [],
                            "üë• –°–µ—Ä–≤–∏—Å": []
                        }
                        
                        for phrase, count in useful_phrases[:20]:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ—Ä–∞–∑—ã
                            phrase_lower = phrase.lower()
                            if any(word in phrase_lower for word in ['–≤–æ–¥–∏—Ç–µ–ª—å', '—Ç–∞–∫—Å–∏', '–¥–æ—Ä–æ–≥–∞', '–º–∞—Ä—à—Ä—É—Ç', '–ø—Ä–æ–±–∫–∏']):
                                categories["üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"].append((phrase, count))
                            elif any(word in phrase_lower for word in ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '—Ñ—É–Ω–∫—Ü–∏—è', '—Ä–∞–±–æ—Ç–∞–µ—Ç', '–±–∞–≥']):
                                categories["üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"].append((phrase, count))
                            elif any(word in phrase_lower for word in ['–≤—Ä–µ–º—è', '–±—ã—Å—Ç—Ä–æ', '–º–µ–¥–ª–µ–Ω–Ω–æ', '–¥–æ–ª–≥–æ', '–æ–∂–∏–¥–∞–Ω–∏–µ']):
                                categories["‚è∞ –í—Ä–µ–º—è"].append((phrase, count))
                            elif any(word in phrase_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–¥–æ—Ä–æ–≥–æ', '–¥–µ—à–µ–≤–æ', '–æ–ø–ª–∞—Ç–∞']):
                                categories["üí∞ –¶–µ–Ω—ã"].append((phrase, count))
                            else:
                                categories["üë• –°–µ—Ä–≤–∏—Å"].append((phrase, count))
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                        cols = st.columns(2)
                        col_idx = 0
                        
                        for category, phrases in categories.items():
                            if phrases:
                                with cols[col_idx % 2]:
                                    st.markdown(f"**{category}:**")
                                    for phrase, count in phrases[:8]:  # –ú–∞–∫—Å–∏–º—É–º 8 —Ñ—Ä–∞–∑ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                                        st.markdown(f"‚Ä¢ **{phrase}** ({count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π)")
                                    if len(phrases) > 8:
                                        st.markdown(f"*... –∏ –µ—â–µ {len(phrases) - 8} —Ñ—Ä–∞–∑*")
                                
                                col_idx += 1
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        st.markdown("---")
                        st.markdown(f"**üìà –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ—Ä–∞–∑:** {len(useful_phrases)}")
                        st.markdown(f"**üéØ –ü–æ–∫–∞–∑–∞–Ω–æ —Ñ—Ä–∞–∑:** {min(20, len(useful_phrases))}")
                else:
                    st.info("üî§ –ü–æ–ª–µ–∑–Ω—ã–µ —Ñ—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–∑—ã–≤–∞—Ö")
            
            if analysis['ai_analysis']:
                st.markdown("---")
                st.subheader("ü§ñ AI –ê–Ω–∞–ª–∏–∑")
                st.markdown(analysis['ai_analysis'])
            else:
                st.warning("AI-–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á OpenAI")
        
        with tab2:
            if filtered_reviews:
                reviews_df = pd.DataFrame([{
                    '–î–∞—Ç–∞': r[0].strftime('%Y-%m-%d'),
                    '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞': r[2],
                    '–û—Ü–µ–Ω–∫–∞': '‚òÖ' * int(r[3]),
                    '–û—Ç–∑—ã–≤': r[1]
                } for r in filtered_reviews])
                
                st.dataframe(reviews_df, use_container_width=True, hide_index=True)
                st.download_button("üì• –°–∫–∞—á–∞—Ç—å CSV", reviews_df.to_csv(index=False), "–æ—Ç–∑—ã–≤—ã.csv", "text/csv")
            else:
                st.warning("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        with tab3:
            selected_platform = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
                ["Google Play", "App Store"],
                horizontal=True
            )
            
            platform_filtered = [
                (r[0].date(), r[3]) 
                for r in filtered_reviews 
                if r[2] == selected_platform
            ]
            
            release_dates = []
            if selected_platform == "Google Play":
                release_dates = st.session_state.get('gp_release_dates', [])
            else:
                release_dates = st.session_state.get('ios_release_dates', [])
            
            if not platform_filtered:
                st.warning(f"–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {selected_platform}")
                return   

            df = pd.DataFrame(platform_filtered, columns=['date', 'rating'])
            daily_ratings = df.groupby('date')['rating'].value_counts().unstack().fillna(0)
            
            colors = {
                1: '#FF0000', 2: '#FFA500', 3: '#FFFF00', 
                4: '#90EE90', 5: '#008000'
            }
            platform_color = '#36c55f' if selected_platform == "Google Play" else '#399eff'
            
            fig, ax = plt.subplots(figsize=(12, 6))
            bottom = None
            
            for rating in [1, 2, 3, 4, 5]:
                if rating in daily_ratings.columns:
                    ax.bar(
                        daily_ratings.index,
                        daily_ratings[rating],
                        color=colors[rating],
                        label=f'{rating} –∑–≤–µ–∑–¥',
                        bottom=bottom
                    )
                    bottom = daily_ratings[rating] if bottom is None else bottom + daily_ratings[rating]
            
            if release_dates:
                max_y = daily_ratings.sum(axis=1).max()
                for item in release_dates:
                    try:
                        date = item['date']

                        if isinstance(date, str):
                            date = datetime.datetime.strptime(date, "%Y-%m-%d").date()
                        
                        if start_date <= date <= end_date:
                            ax.scatter(
                                mdates.date2num(date),
                                max_y * 1.1,
                                color=platform_color,
                                marker='*',
                                s=200,
                                zorder=3,
                                label='–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞'
                            )
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ —Ä–µ–ª–∏–∑–∞: {str(e)}")
            
            ax.xaxis.set_major_locator(mdates.DayLocator())
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
            plt.xticks(rotation=45)
            handles, labels = plt.gca().get_legend_handles_labels()
            by_label = dict(zip(labels, handles))
            plt.legend(by_label.values(), by_label.keys(), title='–õ–µ–≥–µ–Ω–¥–∞', bbox_to_anchor=(1.05, 1))
            plt.title(f'–û—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–ª–∏–∑—ã ({selected_platform})')
            plt.tight_layout()
            st.pyplot(fig)

    if 'selected_gp_app' not in st.session_state:
        st.session_state.selected_gp_app = None
    if 'selected_ios_app' not in st.session_state:
        st.session_state.selected_ios_app = None

    st.title("üì± Opini.AI - –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ –≤ sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        debug_mode = st.checkbox("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏", value=False, help="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤")
    
    with st.container():
        search_query = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", 
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Wildberries –∏–ª–∏ TikTok",
            help="–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"
        )
        
        cols = st.columns([2, 1, 1])
        if cols[0].button("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", use_container_width=True, type="primary"):
            if len(search_query) >= 3:
                with st.spinner("üîç –ò—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∏—Å–∫–∞
                    status_text.text("üîç –ò—â–µ–º –≤ Google Play...")
                    progress_bar.progress(25)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                    results = search_apps(search_query)
                    
                    status_text.text("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    progress_bar.progress(100)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    st.session_state.search_results = results
                    
                    # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    time.sleep(0.5)
                    progress_bar.empty()
                    status_text.empty()
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        
        if cols[1].button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä", use_container_width=True):
            st.session_state.selected_gp_app = None
            st.session_state.selected_ios_app = None
            st.rerun()
        
        if cols[2].button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", use_container_width=True):
            st.session_state.clear()
            st.rerun()
    
    if st.session_state.get('selected_gp_app') or st.session_state.get('selected_ios_app'):
        display_selected_apps()

    if 'search_results' in st.session_state:
        display_search_results(st.session_state.search_results)

    if st.session_state.get('selected_gp_app') or st.session_state.get('selected_ios_app'):
        with st.container():
            main_cols = st.columns([3, 3, 2])
            
            with main_cols[0]:
                start_date = st.date_input(
                    "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞",
                    value=datetime.date.today()-datetime.timedelta(days=30))
            
            with main_cols[1]:
                end_date = st.date_input(
                    "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞",
                    value=datetime.date.today())
            
            with main_cols[2]:
                if st.button(
                    "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
                    use_container_width=True,
                    type="primary"
                ):
                    with st.spinner("–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤..."):
                        all_reviews = []
                        try:
                            if st.session_state.get('selected_gp_app'):
                                all_reviews += get_reviews(
                                    st.session_state.selected_gp_app['id'], 
                                    'google_play', 
                                    start_date, 
                                    end_date,
                                    debug_mode)
                            if st.session_state.get('selected_ios_app'):
                                all_reviews += get_reviews(
                                    st.session_state.selected_ios_app['id'], 
                                    'app_store', 
                                    start_date, 
                                    end_date,
                                    debug_mode)
                            
                            st.session_state.filtered_reviews = sorted(all_reviews, key=lambda x: x[0], reverse=True)
                            st.session_state.analysis_data = analyze_reviews(st.session_state.filtered_reviews)
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    if 'analysis_data' in st.session_state:
        display_analysis(
            st.session_state.analysis_data, 
            st.session_state.filtered_reviews,
            start_date,  # –ü–µ—Ä–µ–¥–∞–µ–º start_date
            end_date     # –ü–µ—Ä–µ–¥–∞–µ–º end_date
        )

if __name__ == "__main__":
    main()
