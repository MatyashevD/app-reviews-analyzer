import datetime
import spacy
import pandas as pd
import re
import streamlit as st
import matplotlib.pyplot as plt
from google_play_scraper import reviews as gp_reviews, Sort
from app_store_scraper import AppStore
from collections import Counter

nlp = spacy.load("ru_core_news_sm")

def extract_google_play_id(url):
    match = re.search(r'id=([a-zA-Z0-9._-]+)', url)
    return match.group(1) if match else None

def extract_app_store_id(url):
    match = re.search(r'/id(\d+)', url)
    return match.group(1) if match else None

def get_google_play_reviews(app_url, lang='ru', country='ru', count=100):
    app_id = extract_google_play_id(app_url)
    if not app_id:
        st.warning("–ù–µ–≤–µ—Ä–Ω—ã–π URL Google Play")
        return []
    
    try:
        result, _ = gp_reviews(
            app_id,
            lang=lang,
            country=country,
            count=count,
            sort=Sort.NEWEST
        )
        return [(r['at'], r['content'], 'Google Play') for r in result]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ Google Play: {str(e)}")
        return []

def get_app_store_reviews(app_url, country='ru', count=100):
    app_id = extract_app_store_id(app_url)
    if not app_id:
        st.warning("–ù–µ–≤–µ—Ä–Ω—ã–π URL App Store")
        return []
    
    try:
        app_name_match = re.search(r'/app/([^/]+)/', app_url)
        app_name = app_name_match.group(1) if app_name_match else "unknown_app"
        
        app = AppStore(country=country, app_id=app_id, app_name=app_name)
        app.review(how_many=count)
        
        return [(r['date'], r['review'], 'App Store') for r in app.reviews]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ App Store: {str(e)}")
        return []

def filter_reviews_by_date(reviews, start_date, end_date):
    return [r for r in reviews if start_date <= r[0] <= end_date]

def extract_top_mentions(reviews, top_n=15, examples_per_word=5):
    word_stats = {}
    
    for date, text, platform in reviews:
        doc = nlp(text.lower())
        for token in doc:
            if token.is_alpha and not token.is_stop:
                word = token.text
                if word not in word_stats:
                    word_stats[word] = {
                        'total': 0,
                        'Google Play': 0,
                        'App Store': 0,
                        'examples': [],
                        'dates': []
                    }
                word_stats[word]['total'] += 1
                word_stats[word][platform] += 1
                
                if len(word_stats[word]['examples']) < examples_per_word:
                    word_stats[word]['examples'].append(text)
                    word_stats[word]['dates'].append(date)
    
    return sorted([
        {
            '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ': word,
            '–í—Å–µ–≥–æ': stats['total'],
            'Google Play': stats['Google Play'],
            'App Store': stats['App Store'],
            '–ü—Ä–∏–º–µ—Ä—ã': stats['examples'],
            '–î–∞—Ç—ã': stats['dates']
        } for word, stats in word_stats.items()
    ], key=lambda x: x['–í—Å–µ–≥–æ'], reverse=True)[:top_n]

def group_by_topics(reviews):
    topics = {
        '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã': ['–≥–ª—é—á–∏—Ç', '–≤—ã–ª–µ—Ç–∞–µ—Ç', '—Ç–æ—Ä–º–æ–∑–∏—Ç', '–±–∞–≥', '–æ—à–∏–±–∫–∞'],
        '–£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è': ['–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '—É–¥–æ–±–Ω–æ', '–Ω–µ—É–¥–æ–±–Ω–æ', '–¥–∏–∑–∞–π–Ω', '–Ω–∞–≤–∏–≥–∞—Ü–∏—è'],
        '–û–ø–ª–∞—Ç–∞/–î–æ—Å—Ç–∞–≤–∫–∞': ['–æ–ø–ª–∞—Ç–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫—É—Ä—å–µ—Ä', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å'],
        '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–¥–∞–Ω–Ω—ã–µ', '–ø–∞—Ä–æ–ª—å', '–∞–∫–∫–∞—É–Ω—Ç', '–≤–∑–ª–æ–º'],
        '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è': ['–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–≤–µ—Ä—Å–∏—è', '–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ', '–Ω–æ–≤–∞—è', '—Å—Ç–∞—Ä–∞—è']
    }
    
    topic_stats = {topic: {'count': 0, 'words': []} for topic in topics}
    
    for _, text, _ in reviews:
        doc = nlp(text.lower())
        words = [token.text for token in doc if token.is_alpha and not token.is_stop]
        
        for topic, keywords in topics.items():
            matches = [word for word in words if word in keywords]
            if matches:
                topic_stats[topic]['count'] += 1
                topic_stats[topic]['words'].extend(matches)
    
    return sorted([
        {
            '–¢–µ–º–∞': topic,
            '–£–ø–æ–º–∏–Ω–∞–Ω–∏—è': stats['count'],
            '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞': ', '.join([f"{w[0]} ({w[1]})" for w in Counter(stats['words']).most_common(3)])
        } for topic, stats in topic_stats.items() if stats['count'] > 0
    ], key=lambda x: x['–£–ø–æ–º–∏–Ω–∞–Ω–∏—è'], reverse=True)

def main():
    st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤", layout="wide")
    st.title("üì± –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
    
    if 'analysis_data' not in st.session_state:
        st.session_state.analysis_data = None
    if 'selected_word' not in st.session_state:
        st.session_state.selected_word = None
    if 'active_tab' not in st.session_state:
        st.session_state.active_tab = "–¢–æ–ø —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"

    col1, col2 = st.columns(2)
    with col1:
        gp_url = st.text_input("–°—Å—ã–ª–∫–∞ Google Play", placeholder="https://play.google.com/store/apps/details?id=...")
    with col2:
        ios_url = st.text_input("–°—Å—ã–ª–∫–∞ App Store", placeholder="https://apps.apple.com/ru/app/...")
    
    start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", datetime.date(2023, 1, 1))
    end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", datetime.date.today())
    
    if st.button("üîç –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
        st.session_state.selected_word = None
        st.session_state.active_tab = "–¢–æ–ø —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        start_dt = datetime.datetime.combine(start_date, datetime.time.min)
        end_dt = datetime.datetime.combine(end_date, datetime.time.max)
        
        with st.spinner("–°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤..."):
            gp_revs = get_google_play_reviews(gp_url)
            ios_revs = get_app_store_reviews(ios_url)
        
        all_reviews = gp_revs + ios_revs
        if not all_reviews:
            st.error("–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
            
        filtered_reviews = filter_reviews_by_date(all_reviews, start_dt, end_dt)
        filtered_gp = [r for r in filtered_reviews if r[2] == 'Google Play']
        filtered_ios = [r for r in filtered_reviews if r[2] == 'App Store']
        
        with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞..."):
            st.session_state.analysis_data = {
                'mentions': extract_top_mentions(filtered_reviews),
                'topics': group_by_topics(filtered_reviews),
                'filtered_reviews': filtered_reviews,
                'gp_count': len(filtered_gp),
                'ios_count': len(filtered_ios)
            }

    if st.session_state.analysis_data:
        data = st.session_state.analysis_data
        st.markdown(f"**–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:** {len(data['filtered_reviews'])}")
        st.markdown(f"**Google Play:** {data['gp_count']} | **App Store:** {data['ios_count']}")
        
        tabs = ["–¢–æ–ø —É–ø–æ–º–∏–Ω–∞–Ω–∏–π", "–¢–µ–º—ã", "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"]
        st.session_state.active_tab = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            tabs,
            index=tabs.index(st.session_state.active_tab),
            horizontal=True,
            label_visibility="collapsed"
        )

        if st.session_state.active_tab == "–¢–æ–ø —É–ø–æ–º–∏–Ω–∞–Ω–∏–π":
            df = pd.DataFrame(data['mentions'])
            st.dataframe(
                df[['–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '–í—Å–µ–≥–æ', 'Google Play', 'App Store']]
                .style.background_gradient(subset=['–í—Å–µ–≥–æ'], cmap='Blues')
                .bar(subset=['Google Play', 'App Store'], color=['#4285F4', '#FF2D55']),
                height=500
            )
            fig, ax = plt.subplots(figsize=(12, 6))
            df.set_index('–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ')[['Google Play', 'App Store']].plot.bar(
                stacked=True, ax=ax, color=['#4285F4', '#FF2D55'])
            plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º")
            plt.xticks(rotation=45)
            st.pyplot(fig)

        elif st.session_state.active_tab == "–¢–µ–º—ã":
            if data['topics']:
                topic_df = pd.DataFrame(data['topics'])
                st.dataframe(
                    topic_df.style
                        .bar(subset=['–£–ø–æ–º–∏–Ω–∞–Ω–∏—è'], color='#5fba7d')
                        .set_properties(**{'text-align': 'left'}),
                    height=400
                )
            else:
                st.info("–¢–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

        elif st.session_state.active_tab == "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è":
            if data['mentions']:
                if not st.session_state.selected_word:
                    st.session_state.selected_word = data['mentions'][0]['–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ']
                
                word_list = [m['–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ'] for m in data['mentions']]
                try:
                    current_index = word_list.index(st.session_state.selected_word)
                except ValueError:
                    current_index = 0
                    st.session_state.selected_word = word_list[0]
                
                new_selection = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ:",
                    word_list,
                    index=current_index,
                    key="word_selector"
                )
                
                if new_selection != st.session_state.selected_word:
                    st.session_state.selected_word = new_selection

                data_word = next(m for m in data['mentions'] if m['–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ'] == st.session_state.selected_word)
                col1, col2 = st.columns([1, 2])
                with col1:
                    st.metric("–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π", data_word['–í—Å–µ–≥–æ'])
                    st.write(f"**Google Play:** {data_word['Google Play']}")
                    st.write(f"**App Store:** {data_word['App Store']}")
                    st.write(f"**–ü–µ—Ä–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** {min(data_word['–î–∞—Ç—ã']).strftime('%d.%m.%Y')}")
                    st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** {max(data_word['–î–∞—Ç—ã']).strftime('%d.%m.%Y')}")
                with col2:
                    st.subheader("–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤")
                    for example in data_word['–ü—Ä–∏–º–µ—Ä—ã']:
                        st.markdown(f"- {example}")
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main()
