import datetime
import re
import streamlit as st
import requests
import pandas as pd
from fuzzywuzzy import fuzz
from itertools import groupby
from bs4 import BeautifulSoup
from google_play_scraper import search, app, reviews as gp_reviews, Sort
from app_store_scraper import AppStore
from collections import defaultdict, Counter
import spacy

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NLP –º–æ–¥–µ–ª–∏
def load_nlp_model():
    try:
        return spacy.load("ru_core_news_sm")
    except:
        spacy.cli.download("ru_core_news_sm")
        return spacy.load("ru_core_news_sm")

nlp = load_nlp_model()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
MAX_RESULTS = 5
DEFAULT_LANG = 'ru'
DEFAULT_COUNTRY = 'ru'

def search_apps(query: str):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –Ω–µ—á–µ—Ç–∫–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
    results = {"google_play": [], "app_store": []}
    
    try:
        # –ü–æ–∏—Å–∫ –≤ App Store —á–µ—Ä–µ–∑ iTunes API
        itunes_response = requests.get(
            "https://itunes.apple.com/search",
            params={
                "term": query,
                "country": "RU",
                "media": "software",
                "limit": 20,
                "entity": "software,iPadSoftware",
                "lang": "ru_ru"
            },
            headers={"User-Agent": "Mozilla/5.0"}
        )
        ios_data = itunes_response.json()
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        sorted_results = sorted(ios_data.get("results", []), 
                              key=lambda x: x['trackName'])
        grouped = groupby(sorted_results, key=lambda x: x['trackName'])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        processed = []
        for name, group in grouped:
            best_match = max(group, 
                           key=lambda x: fuzz.token_set_ratio(query, x['trackName']))
            processed.append(best_match)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        processed.sort(key=lambda x: fuzz.token_set_ratio(query, x['trackName']), 
                      reverse=True)
        
        results["app_store"] = [{
            "id": r["trackId"],
            "title": r["trackName"],
            "developer": r["artistName"],
            "score": r.get("averageUserRating", 0),
            "url": r["trackViewUrl"],
            "match_score": fuzz.token_set_ratio(query, r['trackName'])
        } for r in processed if r['match_score'] > 65][:5]
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ App Store: {str(e)}")
    
    return results

def display_search_results(results: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if results["app_store"]:
        st.markdown("### App Store (–ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)")
        for i, app in enumerate(results["app_store"], 1):
            with st.expander(f"{i}. {app['title']} ({app['match_score']}% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"):
                st.write(f"**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** {app['developer']}")
                st.write(f"**–†–µ–π—Ç–∏–Ω–≥:** {app['score']:.1f} ‚òÖ")
                st.write(f"**–°—Å—ã–ª–∫–∞:** {app['url']}")
                if st.button(f"–í—ã–±—Ä–∞—Ç—å", key=f"ios_{app['id']}"):
                    st.session_state.selected_ios_app = app

    
    # App Store
    if results["app_store"]:
        st.markdown("### App Store")
        for i, app in enumerate(results["app_store"], 1):
            with st.expander(f"{i}. {app['title']}"):
                st.write(f"**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** {app['developer']}")
                st.write(f"**–†–µ–π—Ç–∏–Ω–≥:** {app['score']:.1f} ‚òÖ")
                st.write(f"**–°—Å—ã–ª–∫–∞:** {app['url']}")
                if st.button(f"–í—ã–±—Ä–∞—Ç—å", key=f"ios_{app['id']}"):
                    st.session_state.selected_ios_app = app

def get_reviews(app_id: str, platform: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        if platform == 'google_play':
            result, _ = gp_reviews(
                app_id,
                lang=DEFAULT_LANG,
                country=DEFAULT_COUNTRY,
                count=100,
                sort=Sort.NEWEST
            )
            return [(r['at'], r['content'], 'Google Play', r['score']) for r in result]
        else:
            app_store_app = AppStore(
                country=DEFAULT_COUNTRY, 
                app_id=app_id, 
                app_name=st.session_state[f"selected_{platform}_app"]['title']
            )
            app_store_app.review(how_many=100)
            return [(r['date'], r['review'], 'App Store', r['rating']) for r in app_store_app.reviews]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")
        return []

def analyze_reviews(filtered_reviews: list):
    """–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NLP"""
    analysis = {
        'sentiments': [],
        'key_phrases': Counter(),
        'platform_counts': Counter(),
        'examples': defaultdict(list)
    }
    
    for idx, (date, text, platform, rating) in enumerate(filtered_reviews):
        analysis['platform_counts'][platform] += 1
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
        doc = nlp(text)
        phrases = [chunk.text for chunk in doc.noun_chunks if 2 <= len(chunk.text.split()) <= 4]
        for phrase in phrases:
            analysis['key_phrases'][phrase] += 1
            if len(analysis['examples'][phrase]) < 3:
                analysis['examples'][phrase].append(text[:150] + '...')
    
    return analysis

def display_analysis(analysis: dict, filtered_reviews: list):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    cols = st.columns(2)
    cols[0].metric("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", len(filtered_reviews))
    cols[1].metric("–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã", 
                  f"Google Play: {analysis['platform_counts']['Google Play']} | App Store: {analysis['platform_counts']['App Store']}")
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    st.subheader("üîë –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã")
    if analysis['key_phrases']:
        phrases_df = pd.DataFrame(
            analysis['key_phrases'].most_common(15),
            columns=['–§—Ä–∞–∑–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        )
        st.dataframe(
            phrases_df.style.background_gradient(subset=['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], cmap='Blues'),
            height=400
        )
    else:
        st.info("–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    # –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤
    st.subheader("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã")
    reviews_df = pd.DataFrame([{
        '–î–∞—Ç–∞': r[0].strftime('%Y-%m-%d'),
        '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞': r[2],
        '–û—Ü–µ–Ω–∫–∞': '‚òÖ' * int(r[3]),
        '–¢–µ–∫—Å—Ç': r[1]
    } for r in filtered_reviews[:10]])
    st.dataframe(reviews_df, height=500)

def main():
    st.set_page_config(
        page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
        layout="wide",
        menu_items={'About': "### –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π v3.0"}
    )
    st.title("üì± –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
    
    # –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    search_query = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –°–±–µ—Ä–ë–∞–Ω–∫",
        key="search_input"
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    session_defaults = {
        'search_results': None,
        'selected_gp_app': None,
        'selected_ios_app': None,
        'analysis_data': None
    }
    for key, value in session_defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
    if st.button("üîé –ù–∞–π—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", type="primary"):
        if len(search_query) < 3:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        else:
            with st.spinner("–ò—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."):
                st.session_state.search_results = search_apps(search_query)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    if st.session_state.search_results:
        display_search_results(st.session_state.search_results)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    selected_apps = []
    if st.session_state.selected_gp_app:
        selected_apps.append(f"Google Play: {st.session_state.selected_gp_app['title']}")
    if st.session_state.selected_ios_app:
        selected_apps.append(f"App Store: {st.session_state.selected_ios_app['title']}")
    
    if selected_apps:
        st.success("‚úÖ –í—ã–±—Ä–∞–Ω–æ: " + " | ".join(selected_apps))
    
    # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if selected_apps and st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤", type="primary"):
        all_reviews = []
        
        with st.spinner("–°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤..."):
            if st.session_state.selected_gp_app:
                gp_revs = get_reviews(
                    st.session_state.selected_gp_app['id'], 
                    'google_play'
                )
                all_reviews += gp_revs
            
            if st.session_state.selected_ios_app:
                ios_revs = get_reviews(
                    str(st.session_state.selected_ios_app['id']), 
                    'app_store'
                )
                all_reviews += ios_revs
            
            if not all_reviews:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã")
                return
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
            start_date = datetime.datetime.now() - datetime.timedelta(days=30)
            end_date = datetime.datetime.now()
            filtered_reviews = [
                r for r in all_reviews 
                if start_date <= r[0] <= end_date
            ]
            
            with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞..."):
                analysis = analyze_reviews(filtered_reviews)
                st.session_state.analysis_data = analysis
        
        if st.session_state.analysis_data:
            display_analysis(
                st.session_state.analysis_data, 
                filtered_reviews
            )

if __name__ == "__main__":
    main()
