import streamlit as st
import pandas as pd
from textblob import TextBlob
from google_play_scraper import app, search, Sort, reviews_all
from urllib.parse import urlparse
import warnings
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warnings.filterwarnings("ignore")
pd.set_option('future.no_silent_downcasting', True)

def analyze_sentiment(text):
    analysis = TextBlob(str(text))
    if analysis.sentiment.polarity > 0.2:
        return 'Positive'
    elif analysis.sentiment.polarity < -0.2:
        return 'Negative'
    else:
        return 'Neutral'

def parse_google_play_url(url):
    try:
        parsed = urlparse(url)
        if not parsed.netloc == 'play.google.com':
            return None
        path_parts = parsed.path.split('/')
        if len(path_parts) >= 4 and path_parts[1] == 'store':
            return path_parts[3]
        return None
    except:
        return None

def get_app_reviews(app_ids, review_count=100, lang='en', country='us'):
    all_reviews = []
    for app_id in app_ids:
        result, continuation_token = reviews_all(
            app_id,
            lang=lang,
            country=country,
            sort=Sort.NEWEST,
            count=review_count,
            filter_score_with=None
        )
        for review in result:
            all_reviews.append({
                'App ID': app_id,
                'User': review['userName'],
                'Rating': review['score'],
                'Review': review['content'],
                'Date': review['at'].strftime('%Y-%m-%d'),
                'Likes': review['thumbsUpCount'],
                'Sentiment': analyze_sentiment(review['content'])
            })
    return pd.DataFrame(all_reviews)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title('üì± Advanced App Review Analyzer')
st.markdown("""
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç–∑—ã–≤—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ Google Play Store:
1. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤–≤–æ–¥ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫
2. –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤
3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
4. –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
""")

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞
input_method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤–≤–æ–¥–∞:", ['–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', '–í–≤–æ–¥ —Å—Å—ã–ª–æ–∫ –≤—Ä—É—á–Ω—É—é'])

app_ids = []
app_names = []

if input_method == '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é':
    search_query = st.text_input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    country = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:', ['us', 'ru', 'de', 'fr', 'jp', 'kr'])
    lang = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', ['en', 'ru', 'de', 'fr', 'ja', 'ko'])
    
    if search_query:
        search_results = search(search_query, lang=lang, country=country)
        if search_results:
            selected_apps = st.multiselect(
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:',
                options=[f"{app['title']} ({app['appId']})" for app in search_results],
                format_func=lambda x: x.split(' (')[0]
            )
            app_ids = [app.split(' (')[1][:-1] for app in selected_apps]
            app_names = [app.split(' (')[0] for app in selected_apps]
        else:
            st.warning('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

else:
    urls = st.text_area('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ):')
    if urls:
        urls_list = urls.split('\n')
        app_ids = []
        for url in urls_list:
            url = url.strip()
            if url:
                app_id = parse_google_play_url(url)
                if app_id:
                    app_ids.append(app_id)
                    try:
                        app_info = app(app_id)
                        app_names.append(app_info['title'])
                    except:
                        app_names.append(app_id)
                else:
                    st.error(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}')

if app_ids:
    st.success(f'–í—ã–±—Ä–∞–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(app_ids)}')
    review_count = st.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', 50, 1000, 200, 50)
    
    if st.button('–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã'):
        with st.spinner('–°–æ–±–∏—Ä–∞–µ–º –æ—Ç–∑—ã–≤—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç'):
            reviews_df = get_app_reviews(app_ids, review_count, lang, country)
        
        if not reviews_df.empty:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥", f"{reviews_df['Rating'].mean():.1f} ‚≠ê")
            
            with col2:
                sentiment_dist = reviews_df['Sentiment'].value_counts(normalize=True).mul(100)
                st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:**")
                for sentiment, percent in sentiment_dist.items():
                    st.write(f"{sentiment}: {percent:.1f}%")
            
            with col3:
                rating_dist = reviews_df['Rating'].value_counts().sort_index(ascending=False)
                st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:**")
                for rating, count in rating_dist.items():
                    st.write(f"{'‚≠ê' * int(rating)}: {count} –æ—Ç–∑—ã–≤–æ–≤")

            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            st.subheader('üìù –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã')
            st.dataframe(reviews_df.style.background_gradient(cmap='Blues', subset=['Rating', 'Likes']), 
                        height=500,
                        use_container_width=True)

            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            st.subheader('üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö')
            
            csv = reviews_df.to_csv(index=False).encode('utf-8')
            excel = reviews_df.to_excel(index=False, engine='openpyxl')
            
            col1, col2 = st.columns(2)
            with col1:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å CSV",
                    data=csv,
                    file_name='app_reviews.csv',
                    mime='text/csv'
                )
            with col2:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å Excel",
                    data=excel,
                    file_name='app_reviews.xlsx',
                    mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                )
        else:
            st.warning('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.')
else:
    st.info('üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')

st.markdown("---")
st.caption("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
